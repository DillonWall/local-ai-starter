{
  "createdAt": "2025-02-17T13:39:19.812Z",
  "updatedAt": "2025-02-18T08:43:46.082Z",
  "id": "2F85scP6sRgmntzZ",
  "name": "Import Single File to RAG",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "889fcdd4-08c1-4ef5-8dd4-28bce7a3282e",
      "name": "Extract Document Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        0,
        -160
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{ $('Recombine & Add Context').item.json.fileName }}"
              },
              {
                "name": "folder_id",
                "value": "={{ $('Recombine & Add Context').item.json.directory }}"
              }
            ]
          }
        }
      },
      "id": "d1314f46-3948-4616-9449-30400f447ef9",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        600,
        180
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "163b7c7f-2e88-4e8d-bd79-d6d65888e368",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        600,
        300
      ]
    },
    {
      "parameters": {
        "model": "nomic-embed-text:latest"
      },
      "id": "e3ab4825-4d22-416f-a008-79467a1eaf35",
      "name": "Embeddings Ollama1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        440,
        180
      ],
      "credentials": {
        "ollamaApi": {
          "id": "JXTxKx0oB7KpS3Kl",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "code": {
          "execute": {
            "code": "const { QdrantVectorStore } = require(\"@langchain/qdrant\");\nconst { OllamaEmbeddings } = require(\"@langchain/community/embeddings/ollama\");\n\nconst embeddings = new OllamaEmbeddings({\n  model: \"nomic-embed-text\",\n  baseUrl: \"http://host.docker.internal:11434\"\n});\n\nconst vectorStore = await QdrantVectorStore.fromExistingCollection(\n  embeddings,\n  {\n    url: \"http://host.docker.internal:6333\",\n    collectionName: \"documents\",\n  }\n);\n\nfor (let file of this.getInputData()) {\n  const filter = {\n    must: [\n      {\n        key: \"metadata.file_id\",\n        match: {\n            value: file.json.fileName,\n        },\n      },\n    ],\n  }\n  \n  vectorStore.client.delete(\"documents\", {\n    filter\n  });\n}\n\nreturn this.getInputData();\n"
          }
        },
        "inputs": {
          "input": [
            {
              "type": "main",
              "required": true
            }
          ]
        },
        "outputs": {
          "output": [
            {
              "type": "main"
            }
          ]
        }
      },
      "id": "9d8754b4-0d89-4492-9093-65aa163eabed",
      "name": "Clear Old Vectors",
      "type": "@n8n/n8n-nodes-langchain.code",
      "typeVersion": 1,
      "position": [
        -400,
        -40
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "id": "3e3a9ef0-ddea-4f0c-ad71-ebfd68f4245b",
      "name": "Qdrant Vector Store Insert",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        500,
        -40
      ],
      "executeOnce": true,
      "credentials": {
        "qdrantApi": {
          "id": "AetGV8xkypnwwB73",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "text/markdown",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "748d784a-21d6-49fb-bbbd-f76392786dd6",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "text/plain",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -260,
        -40
      ],
      "id": "071db9c1-acaa-421c-8717-c04a20983a0e",
      "name": "Switch"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "a741acc6-3ad1-4796-9e53-28c9b799f3c4",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -800,
        -40
      ],
      "id": "abf9f122-bbe3-4311-b9d2-1a9918c1fc7f",
      "name": "Webhook",
      "webhookId": "a741acc6-3ad1-4796-9e53-28c9b799f3c4"
    },
    {
      "parameters": {
        "fileSelector": "={{ $json.body.filePath }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -600,
        -40
      ],
      "id": "09f3485c-79a6-403b-b53b-2c1db476c74e",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        920,
        -40
      ],
      "id": "957b2f40-2eb0-46e0-85d4-9ff36a3acee5",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        0,
        100
      ],
      "id": "e4960f9e-6f8c-4fd7-acb4-1f4028bd9397",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "38ae514e-66c9-4a58-a852-8e381a88d34f",
              "name": "data",
              "value": "=Directory: {{ $('Switch').item.json.directory }}\nFileName: {{ $('Switch').item.json.fileName }}\n{{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        240,
        -60
      ],
      "id": "c3be68a0-81e1-4484-9cb9-14ba6b9a4889",
      "name": "Recombine & Add Context"
    }
  ],
  "connections": {
    "Extract Document Text": {
      "main": [
        [
          {
            "node": "Recombine & Add Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store Insert",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama1": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store Insert",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Clear Old Vectors": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract Document Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Document Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Clear Old Vectors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store Insert": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recombine & Add Context": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store Insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "4ccb0d0d-5b0a-4864-a2c2-3ae8c340a2dd",
  "triggerCount": 1,
  "tags": []
}